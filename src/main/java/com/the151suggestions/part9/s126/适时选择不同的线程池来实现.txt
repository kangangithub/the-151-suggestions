Java的线程池实现从最根本来说只有两个:ThreadPoolExecutor类(父类)和ScheduledThreadPoolExecutor类(子类),
这两个类还是父子关系,但Java为了简化并行运算,还提供一个Executors静态类,它可以直接生成多种不同的线程池执行器,
比如单线程执行器,带缓冲的执行器,固定线程数量的执行器,但归根结底还是使ThreadPoolExecutor类或ScheduledThreadPoolExecutor类的封装类.

ThreadPoolExecutor类最基本的构造方法:
/**
 * corePoolSize: 最小线程数
 *      线程池启动后,在池中保持线程的最小数量,需要说明的是线程数量是逐步到达corePoolSize值的,例如,corePoolSize被设置为10,
 *      而任务数量只有5,则线程池中最多会启动5个线程,而不是一次性的启动10个线程.
 * maximumPoolSize: 最大线程数量
 *      池中能够容纳的最大线程数量,如果超出,则使用RejectedExecutionHandler拒绝策略处理
 * keepAliveTime: 线程最大生命期
 *      生命期有两个约束条件,一是该参数是超过corePoolSize数量的线程,二是处于非运行状态的线程.如果corePoolSize为10,maximumPoolSize为20,
 *      此时线程池中有15个线程在运行,一段时间后,其中有3个线程处于等待状态的时间超过了keepAliveTime指定的时间,则结束这3个线程,此时线程池
 *      中还有12个线程在运行
 * unit: 时间单位
 *      keepAliveTime的时间单位,可以是纳秒,毫秒,秒,分钟等选项
 * workQueue: 任务队列
 *      当线程池中的线程都处于运行状态,而此时任务数量继续增加,则需要有一个容器来容纳这些任务,这就是任务队列
 * threadFactory: 线程工厂
 *      定义如何启动一个线程,可以设置线程名称,并且可以确认是否是后台线程等
 * handler: 拒绝任务处理器
 *      由于超出线程数量和队列容量而对继续增加的任务进行处理的程序
 *
 * 线程池管理过程:
 *      首先,创建线程池,然后根据任务的数量逐步将线程增大到corePoolSize数量,如果此时仍有任务增加,则放置到workQueue中,直到workQueue爆满为止,
 *      然后继续增加池中的线程数量(增加处理能力),最终达到maximumPoolSize,如果此时还有任务需要处理,就需要handle来处理,或者丢弃新任务,或者拒绝新任务,
 *      或者挤占已有任务等
 *      在任务队列和线程池都饱和的情况下,一旦有线程处于等待(任务处理完毕,没有新任务增加)状态的时间超过keepAliveTime,则该线程终止,也就是说池中的线程
 *      数量会逐渐降低,直至为corePoolSize数量为止
 */

public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
        //检验输入条件
        if (corePoolSize < 0 ||
            maximumPoolSize <= 0 ||
            maximumPoolSize < corePoolSize ||
            keepAliveTime < 0)
            throw new IllegalArgumentException();
        //检验运行环境
        if (workQueue == null || threadFactory == null || handler == null)
            throw new NullPointerException();
        this.acc = System.getSecurityManager() == null ?
                null :
                AccessController.getContext();
        this.corePoolSize = corePoolSize;
        this.maximumPoolSize = maximumPoolSize;
        this.workQueue = workQueue;
        this.keepAliveTime = unit.toNanos(keepAliveTime);
        this.threadFactory = threadFactory;
        this.handler = handler;
    }
