枚举集合:EnumSet   EnumMap
EnumSet枚举专用Set,保证集合中的元素不重复；
EnumMap枚举专用Map, key是enum类型，而value则可以是任意类型。

EnumSet特点:

EnumTest长度64, SeasonEnum长度65(大于64)
allOf()底层调用noneOf()生产EnumSet对象,再把所有枚举值放进去
EnumSet<EnumTest> enumSet = EnumSet.allOf(EnumTest.class);
EnumSet<SeasonEnum> enumSet = EnumSet.allOf(SeasonEnum.class);

noneOf()源码:
枚举项<=64,生成RegularEnumSet, >64生成JumboEnumSet
public static <E extends Enum<E>> EnumSet<E> noneOf(Class<E> elementType) {
        Enum<?>[] universe = getUniverse(elementType);
        if (universe == null)
            throw new ClassCastException(elementType + " not an enum");

        if (universe.length <= 64)
            return new RegularEnumSet<>(elementType, universe);
        else
            return new JumboEnumSet<>(elementType, universe);
    }

RegularEnumSet源码:
枚举项的排序值ordinal是从0,1,2,...依次递增,RegularEnumSet利用此特点把每个枚举项的ordinal映射到一个long类型(8字节,64位)的每个位上,
class RegularEnumSet<E extends Enum<E>> extends EnumSet<E> {
    .........
    private long elements = 0L;

    void addAll() {
        if (universe.length != 0)
            elements = -1L >>> -universe.length;
    }
    .........
}

JumboEnumSet源码:
类似于RegularEnumSet, JumboEnumSet把枚举项以64个位1组,每组映射到long[]的每个元素上

class JumboEnumSet<E extends Enum<E>> extends EnumSet<E> {
    .........
    private long elements[];

    void addAll() {
        for (int i = 0; i < elements.length; i++)
            elements[i] = -1;
        elements[elements.length - 1] >>>= -universe.length;
        size = universe.length;
    }
    ..........
}